% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_de_bygene.R
\name{smi_de}
\alias{smi_de}
\title{Run DE analysis models on SMI data.}
\usage{
smi_de(
  assay_matrix,
  metadata,
  formula,
  neighborhood_counts = NULL,
  groupVar,
  groupVar_levels = NULL,
  nCores = 1,
  multiCore = TRUE,
  family = "nbinom2",
  targets = NULL,
  cellid_colname = "cell_ID",
  ziformula = ~0,
  ...
)
}
\arguments{
\item{assay_matrix}{counts or normalized assay matrix.
Raw counts recommended for count distributions s.a. negative binomial (i.e., family=nbinom2).
Normalized is recommended for gaussian models.}

\item{metadata}{data.table or data.frame of meta.data associated with assay.
Must contain groupVar column and any covariates in the \code{formula} argument used for DE.
If cell id is not included as a column in metadata, should correspond to rownames in the metadata data.frame object.}

\item{formula}{right hand side of formula used in DE, possibly containing random effects.
Must contain groupVar fixed effect.
It's recommended that raw count models with a log-link (i.e., negative binomial,poisson)
, use a corresponding offset for library size in formula
(i.e., ~de_variable + offset(log(totalcounts))), where totalcounts is a column in the metadata.}

\item{neighborhood_counts}{optional object created by smiDE::measure_neighbor_expression_by_celltype, which contains lists of
the expression counts in neighboring cells by cell type compared to a cell type of reference
(see \code{help(measure_neighbor_expression_by_celltype)}).
May be used to control for confounding or 'bleed-over' in DE model (see examples)}

\item{groupVar}{DE group variable with two levels,must exist in meta.data slot}

\item{groupVar_levels}{optional factor ordering for groupVar, which should have only two-levels (for now)}

\item{nCores}{= 1, number of cores to use, set to 1 if running in serial mode}

\item{multiCore}{= TRUE, set to TRUE to use multiCore, FALSE to run in cluster mode}

\item{family}{a character string naming a family function,
See \code{family} for a generic discussion of families.
Default is nbinom2 (with log link), specifying Negative binomial distribution: quadratic parameterization (Hardin & Hilbe 2007). V=mu*(1+mu/phi) = mu+mu^2/phi.}

\item{targets}{optional vector of targets to run DE for.  If not supplied, run models for all targets in assay.}

\item{cellid_colname}{column name in metadata corresponding to cell id.}

\item{ziformula}{optional formula for model of zero inflation.  Default is ~0 (no zeroinflation).}

\item{...}{further arguments to be passed to model fitting function.
See example below.}
}
\value{
data.table of DE results, with one row per target, marginal means and their SE's of the DE groups
, estimated fold change and p-values for non-zero difference (identity link) or ratio \eqn{\neq 1} (log link) between groups.
}
\description{
Run DE analysis models on SMI data.
}
\examples{

library(Giotto)
library(data.table)
datadir<-system.file("extdata", package="smiDE")
gem <- readRDS(paste0(datadir, "/small_nsclc.rds"))
metainfo <- data.table::copy(gem@cell_metadata$rna)
metainfo <- merge(metainfo, gem@spatial_locs$raw, by="cell_ID")

pre_de_obj <- 
pre_de(counts = gem@expression[["rna"]][["raw"]]
       ,normalized_data = gem@expression[["rna"]][["normalized"]]
       ,metadata = metainfo
       ,cell_type_metadata_colname = "cell_type"
       ,split_neighbors_by_colname = "tissue"
       ,mm_radius = 0.05
       ,ref_celltype = c("macrophage", "fibroblast")
       ,sdimx_colname = "sdimx"
       ,sdimy_colname = "sdimy"
       ,weight_colname = "weight"
       ,contamination = "sum"
       ,verbose=TRUE
)

fibroblast_and_macrophage_cells <- gem@cell_metadata$rna[cell_type \%in\% c(pre_de_obj$nblist$ref_celltype),cell_ID]
de_results <-       
  smi_de(assay_matrix = gem@expression$rna$raw[,fibroblast_and_macrophage_cells]
         ,metadata = metainfo[cell_ID \%in\% fibroblast_and_macrophage_cells]
         ,formula = ~RankNorm(otherct_expr) + niche + tissue + offset(log(totalcounts)) 
         ,neighborhood_counts = pre_de_obj$nblist
         ,groupVar="niche"
         ,family="nbinom2"
         ,targets=rownames(gem@expression$rna$raw)[1:2]
  ) 

results(de_results, "pairwise", variable=de_results$groupVar)

fibroblast_and_macrophage_cells <- gem@cell_metadata$rna[cell_type \%in\% c(pre_de_obj$nblist$ref_celltype),cell_ID]
de_results <-       
  smi_de(assay_matrix = gem@expression$rna$raw[,fibroblast_and_macrophage_cells]
         ,metadata = metainfo[cell_ID \%in\% fibroblast_and_macrophage_cells]
         ,formula = ~RankNorm(otherct_expr) + cell_type + tissue + offset(log(totalcounts)) 
         ,neighborhood_counts = pre_de_obj$nblist
         ,groupVar="cell_type"
         ,family="nbinom2"
         ,targets=rownames(gem@expression$rna$raw)[1:2]
  ) 
results(de_results, "pairwise", variable=de_results$groupVar)

## fit a mixed model with all cells, cell type as a covariate
pre_de_obj <- 
pre_de(counts = gem@expression[["rna"]][["raw"]]
       ,normalized_data = gem@expression[["rna"]][["normalized"]]
       ,metadata = metainfo
       ,cell_type_metadata_colname = "cell_type"
       ,split_neighbors_by_colname = "tissue"
       ,mm_radius = 0.05
       ,ref_celltype = "all"
       ,sdimx_colname = "sdimx"
       ,sdimy_colname = "sdimy"
       ,weight_colname = "weight"
       ,contamination = "sum"
       ,verbose=TRUE
)
de_results <-       
  smi_de(assay_matrix = gem@expression$rna$raw
         ,metadata = metainfo
         ,formula = ~RankNorm(otherct_expr) + cell_type + (1 | tissue) + offset(log(totalcounts)) 
         ,neighborhood_counts = pre_de_obj$nblist
         ,groupVar="cell_type"
         ,family="nbinom2"
         ,targets=rownames(gem@expression$rna$raw)[1:10]
  ) 
results(de_results, "one.vs.rest", variable=de_results$groupVar)
  
  
}
